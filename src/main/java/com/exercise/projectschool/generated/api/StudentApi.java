/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.exercise.projectschool.generated.api;

import java.util.List;

import com.exercise.projectschool.entity.StudentEntity;
import com.exercise.projectschool.model.Student;
import io.swagger.annotations.*;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "Student", description = "the Student API")
public interface StudentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /student/add : Add students
     *
     * @param student  (required)
     * @return Students added successfully (status code 200)
     */
    @ApiOperation(value = "Add students", nickname = "addStudents", notes = "", tags={ "Student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Students added successfully") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/student/add",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addStudents(@ApiParam(value = "", required = true) @Valid @RequestBody List<Student> student) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /student/delete/all : Delete all students
     *
     * @return All students deleted successfully (status code 200)
     */
    @ApiOperation(value = "Delete all students", nickname = "deleteAllStudents", notes = "", tags={ "Student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "All students deleted successfully") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/student/delete/all"
    )
    default ResponseEntity<Void> deleteAllStudents() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /student/delete/{serialNumber} : Delete student by serial number
     *
     * @param serialNumber Serial number of the student to delete (required)
     * @return Student deleted successfully (status code 200)
     */
    @ApiOperation(value = "Delete student by serial number", nickname = "deleteStudentBySerialNumber", notes = "", tags={ "Student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Student deleted successfully") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/student/delete/{serialNumber}"
    )
    default ResponseEntity<Void> deleteStudentBySerialNumber(@ApiParam(value = "Serial number of the student to delete", required = true) @PathVariable("serialNumber") String serialNumber) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /student/all : Get all students
     *
     * @return List of all students (status code 200)
     */
    @ApiOperation(value = "Get all students", nickname = "getAllStudents", notes = "", response = StudentEntity.class, responseContainer = "List", tags={ "Student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of all students", response = StudentEntity.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/student/all",
        produces = { "application/json" }
    )
    default ResponseEntity<List<StudentEntity>> getAllStudents() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"serialNumber\" : \"ABC123\", \"city\" : \"New York\", \"school\" : \"XYZ High School\", \"name\" : \"John Doe\", \"id\" : 1, \"age\" : \"25\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /student/{serialNumber} : Get student by serial number
     *
     * @param serialNumber Serial number of the student (required)
     * @return Student found (status code 200)
     *         or Student not found (status code 404)
     *         or More than one student found (status code 409)
     */
    @ApiOperation(value = "Get student by serial number", nickname = "getStudentBySerialNumber", notes = "", response = StudentEntity.class, tags={ "Student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Student found", response = StudentEntity.class),
        @ApiResponse(code = 404, message = "Student not found"),
        @ApiResponse(code = 409, message = "More than one student found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/student/{serialNumber}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<StudentEntity>> getStudentBySerialNumber(@ApiParam(value = "Serial number of the student", required = true) @PathVariable("serialNumber") String serialNumber) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"serialNumber\" : \"ABC123\", \"city\" : \"New York\", \"school\" : \"XYZ High School\", \"name\" : \"John Doe\", \"id\" : 1, \"age\" : \"25\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /student/update : Update student
     *
     * @param student  (required)
     * @return Student updated successfully (status code 200)
     */
    @ApiOperation(value = "Update student", nickname = "updateStudent", notes = "", tags={ "Student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Student updated successfully") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/student/update",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateStudent(@ApiParam(value = "", required = true) @Valid @RequestBody Student student) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
