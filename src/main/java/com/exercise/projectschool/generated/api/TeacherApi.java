/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.exercise.projectschool.generated.api;

import java.util.List;

import com.exercise.projectschool.entity.StudentEntity;

import com.exercise.projectschool.entity.TeacherEntity;
import com.exercise.projectschool.model.Student;
import com.exercise.projectschool.model.Teacher;
import io.swagger.annotations.*;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "Teacher", description = "the Teacher API")
public interface TeacherApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /teacher/add : Add teachers
     *
     * @param teacher  (required)
     * @return Teachers added successfully (status code 200)
     */
    @ApiOperation(value = "Add teachers", nickname = "addTeachers", notes = "", tags={ "Teacher", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Teachers added successfully") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/teacher/add",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addTeachers(@ApiParam(value = "", required = true) @Valid @RequestBody List<Teacher> teacher) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /teacher/delete/all : Delete all teachers
     *
     * @return All teachers deleted successfully (status code 200)
     */
    @ApiOperation(value = "Delete all teachers", nickname = "deleteAllTeachers", notes = "", tags={ "Teacher", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "All teachers deleted successfully") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/teacher/delete/all"
    )
    default ResponseEntity<Void> deleteAllTeachers() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /teacher/delete/{serialNumber} : Delete teacher by serial number
     *
     * @param serialNumber Serial number of the teacher to delete (required)
     * @return Teacher deleted successfully (status code 200)
     */
    @ApiOperation(value = "Delete teacher by serial number", nickname = "deleteTeacherBySerialNumber", notes = "", tags={ "Teacher", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Teacher deleted successfully") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/teacher/delete/{serialNumber}"
    )
    default ResponseEntity<Void> deleteTeacherBySerialNumber(@ApiParam(value = "Serial number of the teacher to delete", required = true) @PathVariable("serialNumber") String serialNumber) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /teacher/all : Get all teachers
     *
     * @return List of all teachers (status code 200)
     */
    @ApiOperation(value = "Get all teachers", nickname = "getAllTeachers", notes = "", response = TeacherEntity.class, responseContainer = "List", tags={ "Teacher", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of all teachers", response = TeacherEntity.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/teacher/all",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TeacherEntity>> getAllTeachers() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"serialNumber\" : \"TCH123\", \"city\" : \"New York\", \"subject\" : \"Mathematics\", \"name\" : \"John Doe\", \"id\" : 1, \"age\" : \"30\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /teacher/{serialNumber} : Get teacher by serial number
     *
     * @param serialNumber Serial number of the teacher (required)
     * @return Teacher found (status code 200)
     *         or Teacher not found (status code 404)
     *         or More than one teacher found (status code 409)
     */
    @ApiOperation(value = "Get teacher by serial number", nickname = "getTeacherBySerialNumber", notes = "", response = TeacherEntity.class, tags={ "Teacher", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Teacher found", response = TeacherEntity.class),
        @ApiResponse(code = 404, message = "Teacher not found"),
        @ApiResponse(code = 409, message = "More than one teacher found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/teacher/{serialNumber}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TeacherEntity>> getTeacherBySerialNumber(@ApiParam(value = "Serial number of the teacher", required = true) @PathVariable("serialNumber") String serialNumber) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"serialNumber\" : \"TCH123\", \"city\" : \"New York\", \"subject\" : \"Mathematics\", \"name\" : \"John Doe\", \"id\" : 1, \"age\" : \"30\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /teacher/update : Update teacher
     *
     * @param teacher  (required)
     * @return Teacher updated successfully (status code 200)
     */
    @ApiOperation(value = "Update teacher", nickname = "updateTeacher", notes = "", tags={ "Teacher", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Teacher updated successfully") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/teacher/update",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateTeacher(@ApiParam(value = "", required = true) @Valid @RequestBody Teacher teacher) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }
}
